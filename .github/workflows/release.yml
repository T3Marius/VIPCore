name: Create Release

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.331

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Restore dependencies
      run: |
        dotnet restore VIPCore/VIPCore.csproj
        dotnet restore VIPCore-API/VipCoreApi.csproj
        
        # Restore all VIP modules
        for module in Modules/*/; do
          MODULE_NAME=$(basename "$module")
          CSPROJ_FILE="${module}${MODULE_NAME}.csproj"
          echo "Checking for project file: $CSPROJ_FILE"
          if [ -f "$CSPROJ_FILE" ]; then
            echo "Restoring module: $MODULE_NAME"
            dotnet restore "$CSPROJ_FILE"
          else
            echo "Warning: Project file not found for $MODULE_NAME"
          fi
        done
      
    - name: Build solution
      run: |
        # Ensure BuildOutput structure exists before building
        mkdir -p BuildOutput/plugins
        mkdir -p BuildOutput/shared
        
        # Create specific directories for each module
        for module in Modules/*/; do
          MODULE_NAME=$(basename "$module")
          CSPROJ_FILE="${module}${MODULE_NAME}.csproj"
          echo "Checking for project file: $CSPROJ_FILE"
          if [ -f "$CSPROJ_FILE" ]; then
            mkdir -p "BuildOutput/plugins/$MODULE_NAME"
            echo "Created directory: BuildOutput/plugins/$MODULE_NAME"
          else
            echo "Warning: Project file not found for $MODULE_NAME"
          fi
        done
        
        dotnet build VIPCore/VIPCore.csproj --configuration Release --no-restore
        dotnet build VIPCore-API/VipCoreApi.csproj --configuration Release --no-restore
        
        # Build all VIP modules
        for module in Modules/*/; do
          MODULE_NAME=$(basename "$module")
          CSPROJ_FILE="${module}${MODULE_NAME}.csproj"
          echo "Checking for project file: $CSPROJ_FILE"
          if [ -f "$CSPROJ_FILE" ]; then
            echo "Building module: $MODULE_NAME"
            if dotnet build "$CSPROJ_FILE" --configuration Release --no-restore; then
              echo "✅ Successfully built $MODULE_NAME"
              # Show what was built for this module
              echo "Checking BuildOutput after building $MODULE_NAME:"
              ls -la "BuildOutput/plugins/$MODULE_NAME/" 2>/dev/null || echo "No output found for $MODULE_NAME"
            else
              echo "❌ Failed to build $MODULE_NAME, but continuing with other modules..."
            fi
          else
            echo "Warning: Project file not found for $MODULE_NAME"
          fi
        done
        
        # Show complete BuildOutput structure after all builds
        echo "Complete BuildOutput structure after builds:"
        find BuildOutput -type f 2>/dev/null || echo "BuildOutput is empty"
      
    - name: Create build artifacts
      run: |
        mkdir -p release-artifacts
        
        # Debug: Show the build outputs
        echo "Checking build outputs..."
        find . -name "*.dll" -type f
        
        # Show what's in BuildOutput before copying
        echo "BuildOutput contents before build:"
        ls -la BuildOutput/ || echo "BuildOutput doesn't exist"
        ls -la BuildOutput/plugins/ || echo "BuildOutput/plugins doesn't exist"
        
        # Check if BuildOutput has actual plugin content (not just .gitkeep)
        BUILDOUTPUT_HAS_PLUGINS=$(find BuildOutput -name "*.dll" 2>/dev/null | wc -l)
        echo "Found $BUILDOUTPUT_HAS_PLUGINS DLL files in BuildOutput"
        
        if [ "$BUILDOUTPUT_HAS_PLUGINS" -gt 0 ]; then
          echo "Copying BuildOutput structure..."
          cp -r BuildOutput/* release-artifacts/
          echo "BuildOutput copied successfully!"
          ls -la release-artifacts/
        else
          echo "BuildOutput has no built plugins! Building modules individually..."
          
          # Copy VIPCore build output
          if [ -d "VIPCore/bin/Release/net8.0" ] && [ "$(ls -A VIPCore/bin/Release/net8.0)" ]; then
            echo "Copying VIPCore build output..."
            mkdir -p release-artifacts/plugins/VIPCore
            cp -r VIPCore/bin/Release/net8.0/* release-artifacts/plugins/VIPCore/
            ls -la release-artifacts/plugins/VIPCore/
          else
            echo "VIPCore build output not found or empty!"
            exit 1
          fi
          
          # Copy VIPCore-API build output to shared folder
          if [ -d "VIPCore-API/bin/Release/net8.0" ] && [ "$(ls -A VIPCore-API/bin/Release/net8.0)" ]; then
            echo "Copying VIPCore-API build output..."
            mkdir -p release-artifacts/shared/VipCoreApi
            cp -r VIPCore-API/bin/Release/net8.0/* release-artifacts/shared/VipCoreApi/
            ls -la release-artifacts/shared/VipCoreApi/
          else
            echo "VIPCore-API build output not found or empty!"
            exit 1
          fi
          
          # Copy all module build outputs
          for module in Modules/*/; do
            MODULE_NAME=$(basename "$module")
            CSPROJ_FILE="${module}${MODULE_NAME}.csproj"
            if [ -f "$CSPROJ_FILE" ]; then
              MODULE_BIN="${module}bin/Release/net8.0"
              echo "Checking module build output: $MODULE_BIN"
              
              if [ -d "$MODULE_BIN" ] && [ "$(ls -A "$MODULE_BIN")" ]; then
                echo "Copying $MODULE_NAME build output..."
                mkdir -p "release-artifacts/plugins/$MODULE_NAME"
                cp -r "$MODULE_BIN"/* "release-artifacts/plugins/$MODULE_NAME/"
                ls -la "release-artifacts/plugins/$MODULE_NAME/"
              else
                echo "Warning: $MODULE_NAME build output not found or empty"
              fi
            fi
          done
        fi
        
        # Show what we have in release artifacts
        echo "Release artifacts structure:"
        find release-artifacts -type f
        
    - name: Create ZIP archive
      run: |
        cd release-artifacts
        zip -r ../VIPCore-${{ github.ref_name }}.zip . -x "*.pdb" "*.xml"
        cd ..
        
    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
    - name: Generate changelog
      id: changelog
      run: |
        # Get the current tag being released
        CURRENT_TAG="${{ steps.version.outputs.VERSION }}"
        echo "Current tag: $CURRENT_TAG"
        
        # Fetch all tags to ensure we have the complete list
        git fetch --tags --force
        
        # Get all tags sorted by version in descending order, excluding the current tag
        ALL_TAGS=$(git tag -l | grep -v "^${CURRENT_TAG}$" | sort -V -r)
        echo "All tags (excluding current): $ALL_TAGS"
        
        # Get the most recent tag (first in the list after excluding current)
        LAST_TAG=$(echo "$ALL_TAGS" | head -n 1)
        
        echo "Previous tag found: $LAST_TAG"
        
        if [ -n "$LAST_TAG" ]; then
          echo "Found previous tag: $LAST_TAG"
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD)
          COMPARE_LINK="**Full Changelog**: https://github.com/${{ github.repository }}/compare/$LAST_TAG...${{ steps.version.outputs.VERSION }}"
        else
          echo "No previous tag found, this is the first release"
          # First release - get all commits
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --reverse)
          COMPARE_LINK="**Initial Release** 🎉"
        fi
        
        # Write changelog to file
        cat << EOF > changelog.md
        ## What's Changed in ${{ steps.version.outputs.VERSION }}
        
        $CHANGELOG
        
        $COMPARE_LINK
        EOF
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ steps.version.outputs.VERSION }}
        body_path: changelog.md
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./VIPCore-${{ github.ref_name }}.zip
        asset_name: VIPCore-${{ github.ref_name }}.zip
        asset_content_type: application/zip
