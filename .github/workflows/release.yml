name: Create Release

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.331

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Restore dependencies
      run: |
        dotnet restore VIPCore/VIPCore.csproj
        dotnet restore VIPCore-API/VipCoreApi.csproj
      
    - name: Build solution
      run: |
        dotnet build VIPCore/VIPCore.csproj --configuration Release --no-restore
        dotnet build VIPCore-API/VipCoreApi.csproj --configuration Release --no-restore
      
    - name: Create build artifacts
      run: |
        mkdir -p release-artifacts
        mkdir -p release-artifacts/shared/VipCoreApi
        
        # Copy VIPCore main plugin files
        if [ -d "VIPCore/bin/Release/net8.0" ]; then
          echo "Copying VIPCore files..."
          cp VIPCore/bin/Release/net8.0/*.dll release-artifacts/ 2>/dev/null || true
          cp VIPCore/bin/Release/net8.0/*.json release-artifacts/ 2>/dev/null || true
          ls -la VIPCore/bin/Release/net8.0/
        else
          echo "VIPCore build output not found!"
          exit 1
        fi
        
        # Copy VIPCore API to shared folder
        if [ -d "VIPCore-API/bin/Release/net8.0" ]; then
          echo "Copying VIPCore-API files..."
          cp VIPCore-API/bin/Release/net8.0/*.dll release-artifacts/shared/VipCoreApi/ 2>/dev/null || true
          cp VIPCore-API/bin/Release/net8.0/*.json release-artifacts/shared/VipCoreApi/ 2>/dev/null || true
          ls -la VIPCore-API/bin/Release/net8.0/
        else
          echo "VIPCore-API build output not found!"
          exit 1
        fi
        
        # Show what we have in release artifacts
        echo "Release artifacts contents:"
        find release-artifacts -type f
        
    - name: Create ZIP archive
      run: |
        cd release-artifacts
        zip -r ../VIPCore-${{ github.ref_name }}.zip . -x "*.pdb" "*.xml"
        cd ..
        
    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
    - name: Generate changelog
      id: changelog
      run: |
        # Get commits since last tag (handle first release)
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -n "$LAST_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD)
          COMPARE_LINK="**Full Changelog**: https://github.com/${{ github.repository }}/compare/$LAST_TAG...${{ steps.version.outputs.VERSION }}"
        else
          # First release - get all commits
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --reverse)
          COMPARE_LINK="**Initial Release** ðŸŽ‰"
        fi
        
        # Write changelog to file
        cat << EOF > changelog.md
        ## What's Changed in ${{ steps.version.outputs.VERSION }}
        
        $CHANGELOG
        
        $COMPARE_LINK
        EOF
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ steps.version.outputs.VERSION }}
        body_path: changelog.md
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./VIPCore-${{ github.ref_name }}.zip
        asset_name: VIPCore-${{ github.ref_name }}.zip
        asset_content_type: application/zip
